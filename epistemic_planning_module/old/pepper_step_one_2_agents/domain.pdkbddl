(define (domain grid)

    (:agents a b)
    (:types pos block box)
    (:constants)
    (:predicates
       (at ?ag - agent ?p - pos)
       (atBox ?bx - box ?p - pos)
       (in ?b - block ?bx - box)
       (holding ?ag - agent ?b - block)
       (atRobot ?p - pos)
       (dummy)

       
    ) 
      

      ;add an axiom where if an agent believes that a block is in bx1, then it believes that the block is neither ;in bx2 nor in bx3 (similarly for all boxes)     
    
   (:action leaveroom
        :derive-condition   always
        :parameters         (?ag - agent ?p1 - pos)
        :precondition       (and (dummy))
        :effect             (and (not (at ?ag ?p1))
                              (forall ?a - agent
                                  (and (when (at ?a ?p1) [?a](!at ?ag ?p1))
                                  )
                                  )
                              )
    )

    (:action enterroom
        :derive-condition   always
        :parameters         (?ag - agent ?p1 - pos)
        :precondition       (and (dummy))
        :effect             (and (at ?ag ?p1)
                              (forall ?a - agent
                                  (and (when (at ?a ?p1) [?a](at ?ag ?p1))
                                  )
                                  )
                              )
    )

     (:action pickupblock
      :derive-condition   always
      :parameters         (?ag - agent ?b - block ?bx - box ?p1 - pos)
      :precondition       (and (in ?b ?bx) (atBox ?bx ?p1) (at ?ag ?p1))
      :effect             (and 


                                (when (atRobot ?p1) (not (in ?b ?bx)))


                                (when (atRobot ?p1) (holding ?ag ?b))

                              

                              (forall ?a - agent
                                  (and 
                                  (when (at ?a ?p1) [?a](holding ?ag ?b))
                                  (when (at ?a ?p1) [?a](!in ?b ?bx))
                                  (when (and (not (at ?a ?p1)) [?a](!in ?b ?bx)) [?a](!in ?b ?bx))
                                  (when (and (not (at ?a ?p1)) [?a](in ?b ?bx)) [?a](in ?b ?bx))
                                  )
                                  )

                            )
  )


    (:action putblockinBox
      :derive-condition   always
      :parameters         (?ag - agent ?b - block ?bx - box ?p1 - pos)
      :precondition       (and (holding ?ag ?b) (atBox ?bx ?p1) (at ?ag ?p1))
      :effect             (and  
                            
                            (when (atRobot ?p1) (not (holding ?ag ?b)))
                            (when (atRobot ?p1) (in ?b ?bx))

                              (forall ?a - agent
                                  (and 
                                  (when (at ?a ?p1) [?a](!holding ?ag ?b))
                                  (when (at ?a ?p1) [?a](in ?b ?bx))
                                  (when (and (not (at ?a ?p1)) [?a](!in ?b ?bx)) [?a](!in ?b ?bx))
                                  (when (and (not (at ?a ?p1)) [?a](in ?b ?bx)) [?a](in ?b ?bx))
                                  )
                                  )

                            )
  )

)